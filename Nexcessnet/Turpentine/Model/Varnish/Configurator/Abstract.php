<?php

abstract class Nexcessnet_Turpentine_Model_Varnish_Configurator_Abstract {
    public function __construct( $options=array() ) {

    }

    abstract public function generate();
    abstract protected function _getTemplateVars();

    /**
     * Save the generated config to the file specified in Magento config
     *
     * @param  string $generatedConfig config generated by @generate
     * @return null
     */
    public function save( $generatedConfig ) {
        $filename = $this->_getVclFilename();
        $dir = dirname( $filename );
        if( !is_dir( $dir ) ) {
            if( !mkdir( $dir, true ) ) {
                $err = error_get_last();
                return array( false, $err );
            }
        }
        if( strlen( $generatedConfig ) !==
                file_put_contents($filename, $generatedConfig ) ) {
            $err = error_get_last();
            return array( false, $err );
        }
        return array( true, null );
    }

    /**
     * Get the list of turpentine/varnish_admin_socket models configured in
     * the server list
     *
     * @return array
     */
    public function getSockets() {
        $sockets = array();
        foreach( explode( PHP_EOL,
                Mage::getStoreConfig( 'turpentine_servers/servers/server_list' ) )
                as $server ) {
            $parts = explode( ':', $server );
            $sockets[] = Mage::getModel( 'turpentine/varnish_admin_socket',
                array( 'host' => $parts[0], 'port' => $parts[1] ) );
        }
        return $sockets;
    }

    /**
     * Get the full path for a given template filename
     *
     * @param  string $baseFilename
     * @return string
     */
    protected function _getVclTemplateFilename( $baseFilename ) {
        $extensionDir = dirname( dirname( dirname( dirname( __FILE__ ) ) ) );
        return sprintf( '%s/misc/%s', $extensionDir, $baseFilename );
    }

    /**
     * [_getVclFilename description]
     * @return [type]
     */
    protected function _getVclFilename() {
        return $this->_formatTemplate(
            Mage::getStoreConfig( 'turpentine_servers/servers/config_file' ),
            array( 'root_dir' => Mage::getBaseDir() ) );
    }

    /**
     * Format a template string, replacing {{keys}} with the appropriate values
     * and remove unspecified keys
     *
     * @param  string $template template string to operate on
     * @param  array  $vars     array of key => value replacements
     * @return string
     */
    protected function _formatTemplate( $template, array $vars ) {
        $needles = array_map( create_function( '$k', 'return "{{".$k."}}";' ),
            array_keys( $vars ) );
        $replacements = array_values( $vars );
        // do replacements, then delete unused template vars
        return preg_replace( '~{{[^}]+}}~', '',
            str_replace( $needles, $replacements, $template ) );
    }

    /**
     * Format a VCL subroutine call
     *
     * @param  string $subroutine subroutine name
     * @return string
     */
    protected function _vcl_call( $subroutine ) {
        return sprintf( 'call %s;', $subroutine );
    }

    /**
     * Get the list of normalizations to apply
     *
     * @return array
     */
    protected function _getNormalizations() {
        return array( 'encoding', 'user_agent' );
    }

    /**
     * Get the Magento admin frontname
     *
     * This is just the plain string, not in URL format. ex:
     * http://example.com/magento/admin -> admin
     *
     * @return string
     */
    protected function _getAdminFrontname() {
        if( Mage::getStoreConfig( 'admin/url/use_custom_path' ) ) {
            return Mage::getStoreConfig( 'admin/url/custom_path' );
        } else {
            return Mage::getConfig()->getNode(
                'admin/routers/adminhtml/args/frontName' );
        }
    }

    /**
     * Get the hostname for host normalization from Magento's base URL
     *
     * @return string
     */
    protected function _getNormalizeHostTarget() {
        $baseUrl = parse_url( Mage::getBaseUrl() );
        if( isset( $baseUrl['port'] ) ) {
            return sprintf( '%s:%d', $baseUrl['host'], $baseUrl['port'] );
        } else {
            return $baseUrl['host'];
        }
    }

    /**
     * Get the base url path regex
     *
     * ex: base_url: http://example.com/magento/
     *     path_regex: /magento/(?:(?:index|litespeed)\.php/)?
     *
     * @return string
     */
    public function getBaseUrlPathRegex() {
        return '^' . parse_url(
                Mage::getStoreConfig( 'web/unsecure/base_url' ), PHP_URL_PATH ) .
            '(?:(?:index|litespeed)\\.php/)?';
    }

    /**
     * Format the URL exclusions for insertion in a regex. Admin frontname and
     * API are automatically added.
     *
     * @return string
     */
    protected function _getUrlExcludes() {
        return implode( '|', array_merge( array( $this->_getAdminFrontname(), 'api' ),
            array_map( 'trim', explode( PHP_EOL,
                Mage::getStoreConfig( 'turpentine_control/urls/url_blacklist' ) ) ) ) );
    }

    /**
     * Format the cookie exclusions for insertion in a regex. The no cache
     * cookie is automatically included
     *
     * @return string
     */
    protected function _getCookieExcludes() {
        $cookies = array(
            Mage::helper( 'turpentine' )->getNoCacheCookieName(),
            Mage::helper( 'turpentine' )->getAdminCookieName() );
        $excludedCookies = array_map( 'trim', explode( PHP_EOL, trim(
            Mage::getStoreConfig( 'turpentine_control/excludes/cookies' ) ) ) );
        foreach( $excludedCookies as $cookie ) {
            if( $cookie ) {
                $cookies[] = $cookie;
            }
        }
        return implode( '|', $cookies );
    }

    /**
     * Get the default cache TTL from Magento config
     *
     * @return string
     */
    protected function _getDefaultTtl() {
        return trim( Mage::getStoreConfig( 'turpentine_control/ttls/default_ttl' ) );
    }

    /**
     * Get the default backend configuration string
     *
     * @return string
     */
    protected function _getDefaultBackend() {
        return $this->_vcl_backend( 'default',
            Mage::getStoreConfig( 'turpentine_servers/backend/backend_host' ),
            Mage::getStoreConfig( 'turpentine_servers/backend/backend_port' ) );
    }

    /**
     * Get the grace period for vcl_fetch
     *
     * This is curently hardcoded to 15 seconds, will be configurable at some
     * point
     *
     * @return string
     */
    protected function _getGracePeriod() {
        return '15';
    }

    /**
     * Get whether debug headers should be enabled or not
     *
     * @return string
     */
    protected function _getEnableDebugHeaders() {
        return Mage::getStoreConfig( 'turpentine_servers/debug/headers' )
            ? 'true' : 'false';
    }

    /**
     * Format the GET variable excludes for insertion in a regex
     *
     * @return string
     */
    protected function _getGetParamExcludes() {
        return implode( '|', array_map( 'trim', explode( ',',
            Mage::getStoreConfig( 'turpentine_control/params/get_params' ) ) ) );
    }

    /**
     * Remove empty and commented out lines from the generated VCL
     *
     * @param  string $dirtyVcl generated vcl
     * @return string
     */
    protected function _cleanVcl( $dirtyVcl ) {
        return implode( PHP_EOL,
            array_filter(
                explode( PHP_EOL, $dirtyVcl ),
                array( $this, '_cleanVclHelper' )
            )
        );
    }

    /**
     * Helper to filter out blank/commented lines for VCL cleaning
     *
     * @param  string $line
     * @return bool
     */
    protected function _cleanVclHelper( $line ) {
        return trim( $line ) && substr( trim( $line ), 0, 1 ) != '#';
    }

    /**
     * Format a VCL backend declaration
     *
     * @param  string $name name of the backend
     * @param  string $host backend host
     * @param  string $port backend port
     * @return string
     */
    protected function _vcl_backend( $name, $host, $port ) {
        $tpl = <<<EOS
backend {{name}} {
    .host = "{{host}}";
    .port = "{{port}}";
}
EOS;
        $vars = array(
            'host'  => $host,
            'port'  => $port,
            'name'  => $name,
        );
        return $this->_formatTemplate( $tpl, $vars );
    }

    /**
     * Format a VCL ACL declaration
     *
     * @param  string $name  ACL name
     * @param  array  $hosts list of hosts to add to the ACL
     * @return string
     */
    protected function _vcl_acl( $name, array $hosts ) {
        $tpl = <<<EOS
acl {{name}} {
    {{hosts}}
}
EOS;
        $fmtHost = create_function( '$h', 'return sprintf(\'"%s";\',$h);' );
        $vars = array(
            'name'  => $name,
            'hosts' => implode( "\n    ", array_map( $fmtHost, $hosts ) ),
        );
        return $this->_formatTemplate( $tpl, $vars );
    }
}
